:py:mod:`redishelper.url_parser`
================================

.. py:module:: redishelper.url_parser


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   redishelper.url_parser.RedisUrlInfo



Functions
~~~~~~~~~

.. autoapisummary::

   redishelper.url_parser.addresses2clusternode
   redishelper.url_parser.redisurl_parser



.. py:function:: addresses2clusternode(addresses: str, *, aio: bool = False) -> Union[List[redis.cluster.ClusterNode], List[redis.asyncio.cluster.ClusterNode]]

   将节点地址转换成节点对象.

   :param addresses: 以','分隔的host:port地址列表
   :type addresses: str
   :param aio: 是否为异步连接. Defaults to False.
   :type aio: bool

   :returns: 同步或异步集群节点列表
   :rtype: Union[List[ClusterNode], List[AioClusterNode]]


.. py:class:: RedisUrlInfo

   Bases: :py:obj:`TypedDict`

   A simple typed namespace. At runtime it is equivalent to a plain dict.

   TypedDict creates a dictionary type that expects all of its
   instances to have a certain set of keys, where each key is
   associated with a value of a consistent type. This expectation
   is not checked at runtime but is only enforced by type checkers.
   Usage::

       class Point2D(TypedDict):
           x: int
           y: int
           label: str

       a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK
       b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check

       assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')

   The type info can be accessed via Point2D.__annotations__. TypedDict
   supports two additional equivalent forms::

       Point2D = TypedDict('Point2D', x=int, y=int, label=str)
       Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})

   By default, all keys must be present in a TypedDict. It is possible
   to override this by specifying totality.
   Usage::

       class point2D(TypedDict, total=False):
           x: int
           y: int

   This means that a point2D TypedDict can have any of the keys omitted.A type
   checker is only expected to support a literal False or True as the value of
   the total argument. True is the default, and makes all items defined in the
   class body be required.

   The class syntax is only supported in Python 3.6+, while two other
   syntax forms work for Python 2.7 and 3.2+

   .. py:attribute:: aio
      :annotation: :bool

      

   .. py:attribute:: cluster
      :annotation: :bool

      

   .. py:attribute:: redis_url
      :annotation: :str

      


.. py:exception:: RedisUrlError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:function:: redisurl_parser(url: str) -> RedisUrlInfo

   校验和规整url.

   url的schema可以为`redis/rediss`,`async`,`cluster`三个对象的组合,但必须包含`redis`或`rediss`

   :param url: 原始的url
   :type url: str

   :raises RedisUrlError: url的校验错误

   :returns: url中获得的信息
   :rtype: RedisUrlInfo


