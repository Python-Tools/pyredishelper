:py:mod:`redishelper.queueproducer`
===================================

.. py:module:: redishelper.queueproducer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   redishelper.queueproducer.QueueProducerHelper



Functions
~~~~~~~~~

.. autoapisummary::

   redishelper.queueproducer._publish_async
   redishelper.queueproducer._publish_sync
   redishelper.queueproducer._mount_sync
   redishelper.queueproducer._mount_async



.. py:class:: QueueProducerHelper(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, l2r: bool = False, **conn_params: Any)

   Bases: :py:obj:`redishelper.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'publish', 'mount', '_l2r']

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: l2r(self) -> bool
      :property:

      描述插入和弹出消息的方向.


   .. py:method:: from_proxy(clz, proxy: redishelper.proxy.RedisProxy, *, l2r: bool = False) -> QueueProducerHelper
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param l2r: 是否从左侧插入数据右侧读取数据. Defaults to False.
      :type l2r: bool, optional

      :returns: 满足protocols.ProducerProtocol或者protocols.AioProducerProtocol协议的消费者代理对象
      :rtype: QueueProducerHelper



.. py:function:: _publish_async(self: QueueProducerHelper, topic: str, value: Union[str, bytes]) -> None
   :async:


.. py:function:: _publish_sync(self: QueueProducerHelper, topic: str, value: Union[str, bytes]) -> None


.. py:function:: _mount_sync(self: QueueProducerHelper) -> Generator[QueueProducerHelper, None, None]


.. py:function:: _mount_async(self: QueueProducerHelper) -> AsyncGenerator[QueueProducerHelper, None]
   :async:


