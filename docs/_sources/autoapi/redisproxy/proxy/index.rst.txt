:py:mod:`redisproxy.proxy`
==========================

.. py:module:: redisproxy.proxy

.. autoapi-nested-parse::

   基础的redis代理对象.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   redisproxy.proxy.RedisProxy




.. py:class:: RedisProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, **conn_params: Any)

   Bases: :py:obj:`pyproxypattern.Proxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster']

      

   .. py:method:: aio(self) -> bool
      :property:


   .. py:method:: cluster(self) -> bool
      :property:


   .. py:method:: new_instance_from_addresses(self, addresses: str, *, aio: bool = False, **conn_params: Any) -> Union[redis.cluster.RedisCluster, redis.asyncio.cluster.RedisCluster]


   .. py:method:: initialize_from_addresses(self, addresses: str, *, aio: bool = False, **conn_params: Any) -> None

      使用集群起始节点地址初始化redis连接实例

      :param addresses: 以','分隔的host:port地址列表
      :type addresses: str
      :param aio: 是否构造异步客户端. Defaults to False.
      :type aio: bool, optional
      :param conn_params: 其他连接选项.
      :type conn_params: Any


   .. py:method:: new_instance_from_url(self, url: str, *, aio: bool = False, cluster: bool = False, **conn_params: Any) -> Union[redis.Redis, redis.asyncio.Redis, redis.cluster.RedisCluster, redis.asyncio.cluster.RedisCluster]


   .. py:method:: initialize_from_url(self, url: str, **conn_params: Any) -> None

      使用url初始化代理对象

      :param url: 适用于非集群redis的请求url.
      :type url: str
      :param conn_params: 其他连接选项.
      :type conn_params: Any



