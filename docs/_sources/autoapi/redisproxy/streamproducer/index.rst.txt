:py:mod:`redisproxy.streamproducer`
===================================

.. py:module:: redisproxy.streamproducer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   redisproxy.streamproducer.StreamProducerProxy



Functions
~~~~~~~~~

.. autoapisummary::

   redisproxy.streamproducer._publish_async
   redisproxy.streamproducer._publish_sync
   redisproxy.streamproducer._mount_sync
   redisproxy.streamproducer._mount_async



.. py:class:: StreamProducerProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, maxlen: Optional[int] = None, approximate: bool = True, nomkstream: bool = False, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'mount', 'publish', '_maxlen',...

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, maxlen: Optional[int] = None, approximate: bool = True, nomkstream: bool = False) -> StreamProducerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param maxlen: 流的最大长度 Defaults to None.
      :type maxlen: Optional[int], optional
      :param approximate: 是否有余量的执行最大长度. Defaults to True.
      :type approximate: bool, optional
      :param nomkstream: 流不存在时是否自动创建. Defaults to False.
      :type nomkstream: bool, optional

      :returns: 满足protocols.StreamProducerProtocol或者protocols.AioStreamProducerProtocol协议的消费者代理对象
      :rtype: StreamProducerProxy



.. py:function:: _publish_async(self: StreamProducerProxy, topic: str, value: Dict[str, str]) -> None
   :async:


.. py:function:: _publish_sync(self: StreamProducerProxy, topic: str, value: Dict[str, str]) -> None


.. py:function:: _mount_sync(self: StreamProducerProxy) -> Generator[StreamProducerProxy, None, None]


.. py:function:: _mount_async(self: StreamProducerProxy) -> AsyncGenerator[StreamProducerProxy, None]
   :async:


