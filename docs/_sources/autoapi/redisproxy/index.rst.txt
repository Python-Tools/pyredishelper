:py:mod:`redisproxy`
====================

.. py:module:: redisproxy


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   channelconsumer/index.rst
   channelproducer/index.rst
   models/index.rst
   protocols/index.rst
   proxy/index.rst
   queueconsumer/index.rst
   queueproducer/index.rst
   streamconsumer/index.rst
   streamproducer/index.rst
   url_parser/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   redisproxy.RedisProxy
   redisproxy.ChannelConsumerProxy
   redisproxy.ChannelProducerProxy
   redisproxy.QueueConsumerProxy
   redisproxy.QueueProducerProxy
   redisproxy.StreamConsumerProxy
   redisproxy.StreamProducerProxy
   redisproxy.AutoOffsetReset
   redisproxy.Acks
   redisproxy.ConsumerRecord
   redisproxy.ConsumerProtocol
   redisproxy.ProducerProtocol
   redisproxy.AioConsumerProtocol
   redisproxy.AioProducerProtocol
   redisproxy.StreamProducerProtocol
   redisproxy.AioStreamProducerProtocol




.. py:class:: RedisProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, **conn_params: Any)

   Bases: :py:obj:`pyproxypattern.Proxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster']

      

   .. py:method:: aio(self) -> bool
      :property:


   .. py:method:: cluster(self) -> bool
      :property:


   .. py:method:: new_instance_from_addresses(self, addresses: str, *, aio: bool = False, **conn_params: Any) -> Union[redis.cluster.RedisCluster, redis.asyncio.cluster.RedisCluster]


   .. py:method:: initialize_from_addresses(self, addresses: str, *, aio: bool = False, **conn_params: Any) -> None

      使用集群起始节点地址初始化redis连接实例

      :param addresses: 以','分隔的host:port地址列表
      :type addresses: str
      :param aio: 是否构造异步客户端. Defaults to False.
      :type aio: bool, optional
      :param conn_params: 其他连接选项.
      :type conn_params: Any


   .. py:method:: new_instance_from_url(self, url: str, *, aio: bool = False, cluster: bool = False, **conn_params: Any) -> Union[redis.Redis, redis.asyncio.Redis, redis.cluster.RedisCluster, redis.asyncio.cluster.RedisCluster]


   .. py:method:: initialize_from_url(self, url: str, **conn_params: Any) -> None

      使用url初始化代理对象

      :param url: 适用于非集群redis的请求url.
      :type url: str
      :param conn_params: 其他连接选项.
      :type conn_params: Any



.. py:class:: ChannelConsumerProxy(topics: str, *, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'watch', '_topics']

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: _watch_async(self, channel: redis.asyncio.client.PubSub, timeout: Optional[int] = None) -> AsyncGenerator[redisproxy.models.ConsumerRecord, None]
      :async:


   .. py:method:: _watch_sync(self, channel: redis.client.PubSub, timeout: int = 3) -> Generator[redisproxy.models.ConsumerRecord, None, None]


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, topics: str) -> ChannelConsumerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param topics: 待监听的频道名列表,以","分隔
      :type topics: str

      :returns: 满足protocols.ConsumerProtocol或者protocols.AioConsumerProtocol协议的消费者代理对象
      :rtype: ChannelConsumerProxy



.. py:class:: ChannelProducerProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'mount']

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy) -> ChannelProducerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy

      :returns: 满足protocols.ProducerProtocol或者protocols.AioProducerProtocol协议的消费者代理对象
      :rtype: ChannelProducerProxy



.. py:class:: QueueConsumerProxy(topics: str, *, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, l2r: bool = False, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'watch', '_l2r', '_topics']

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: l2r(self) -> bool
      :property:

      描述插入和弹出消息的方向.


   .. py:method:: _watch_async(self, timeout: int = 3) -> AsyncGenerator[redisproxy.models.ConsumerRecord, None]
      :async:


   .. py:method:: _watch_sync(self, timeout: int = 3) -> Generator[redisproxy.models.ConsumerRecord, None, None]


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, topics: str, *, l2r: bool = False) -> QueueConsumerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param topics: 待监听的频道名列表,以","分隔
      :type topics: str
      :param l2r: 是否从左侧插入数据右侧读取数据. Defaults to False.
      :type l2r: bool, optional

      :returns: 满足protocols.ConsumerProtocol或者protocols.AioConsumerProtocol协议的消费者代理对象
      :rtype: QueueConsumerProxy



.. py:class:: QueueProducerProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, l2r: bool = False, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'publish', 'mount', '_l2r']

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: l2r(self) -> bool
      :property:

      描述插入和弹出消息的方向.


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, *, l2r: bool = False) -> QueueProducerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param l2r: 是否从左侧插入数据右侧读取数据. Defaults to False.
      :type l2r: bool, optional

      :returns: 满足protocols.ProducerProtocol或者protocols.AioProducerProtocol协议的消费者代理对象
      :rtype: QueueProducerProxy



.. py:class:: StreamConsumerProxy(topics: str, *, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, auto_offset_reset: redisproxy.models.AutoOffsetReset = AutoOffsetReset.latest, count: Optional[int] = 1, blocktime: Optional[int] = 1000, client_id: Optional[str] = None, group_id: Optional[str] = None, ack: redisproxy.models.Acks = Acks.after, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'watch', '_topics',...

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: _watch_async(self) -> AsyncGenerator[redisproxy.models.ConsumerRecord, None]
      :async:


   .. py:method:: _watch_sync(self) -> Generator[redisproxy.models.ConsumerRecord, None, None]


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, topics: str, *, auto_offset_reset: redisproxy.models.AutoOffsetReset = AutoOffsetReset.latest, count: Optional[int] = 20, blocktime: Optional[int] = 1000, client_id: Optional[str] = None, group_id: Optional[str] = None, ack: redisproxy.models.Acks = Acks.after) -> StreamConsumerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param topics: 待监听的频道名列表,以","分隔
                     auto_offset_reset (AutoOffsetReset, optional): 监听的开始位置. Defaults to AutoOffsetReset.latest.
      :type topics: str
      :param count: 一次监听获取的最大消息个数. Defaults to 1.
      :type count: Optional[int], optional
      :param blocktime: 一次监听的最大等待时间. Defaults to 1000.
      :type blocktime: Optional[int], optional
      :param client_id: 客户端id,如果要用group模式监听数据则必填. Defaults to None.
      :type client_id: Optional[str], optional
      :param group_id: group id,如果要用group模式监听数据则必填. Defaults to None.
      :type group_id: Optional[str], optional
      :param ack: group模式下确认消息已读取的策略. Defaults to Acks.after.
      :type ack: Acks, optional

      :returns: 满足protocols.ConsumerProtocol或者protocols.AioConsumerProtocol协议的消费者代理对象
      :rtype: StreamConsumerProxy



.. py:class:: StreamProducerProxy(*, url: Optional[str] = None, addresses: Optional[str] = None, aio: Optional[bool] = None, maxlen: Optional[int] = None, approximate: bool = True, nomkstream: bool = False, **conn_params: Any)

   Bases: :py:obj:`redisproxy.proxy.RedisProxy`

   redis的代理类.

   .. py:attribute:: __slots__
      :annotation: = ['instance', '_callbacks', '_instance_check', '_aio', '_cluster', 'mount', 'publish', '_maxlen',...

      

   .. py:method:: regist_methods(self, instance: Any) -> None


   .. py:method:: from_proxy(clz, proxy: redisproxy.proxy.RedisProxy, maxlen: Optional[int] = None, approximate: bool = True, nomkstream: bool = False) -> StreamProducerProxy
      :classmethod:

      从RedisProxy实例创建代理.

      :param proxy: RedisProxy的实例
      :type proxy: RedisProxy
      :param maxlen: 流的最大长度 Defaults to None.
      :type maxlen: Optional[int], optional
      :param approximate: 是否有余量的执行最大长度. Defaults to True.
      :type approximate: bool, optional
      :param nomkstream: 流不存在时是否自动创建. Defaults to False.
      :type nomkstream: bool, optional

      :returns: 满足protocols.StreamProducerProtocol或者protocols.AioStreamProducerProtocol协议的消费者代理对象
      :rtype: StreamProducerProxy



.. py:class:: AutoOffsetReset

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: earliest
      

      

   .. py:attribute:: latest
      

      


.. py:class:: Acks

   Bases: :py:obj:`enum.Enum`

   ack的策略

   .. py:attribute:: before
      

      

   .. py:attribute:: after
      

      

   .. py:attribute:: after_batch
      

      


.. py:class:: ConsumerRecord

   .. py:attribute:: topic
      :annotation: :str

      The topic this record is received from

   .. py:attribute:: value
      :annotation: :Union[bytes, str, Dict[str, str]]

      The value

   .. py:attribute:: offset
      :annotation: :Optional[str]

      The position id of this record in redis stream.

   .. py:attribute:: timestamp
      :annotation: :Optional[int]

      The milliseconds timestamp of this record


.. py:class:: ConsumerProtocol

   Bases: :py:obj:`Protocol`

   同步消费者的协议.

   .. py:method:: watch(self) -> ContextManager[Iterable[redisproxy.models.ConsumerRecord]]

      同步监听接口.

      调用后获得一个管理启动关闭连接并且返回一个可迭代对象的上下文管理器.监听获取消息可以直接使用`for`实现.

      .. rubric:: 示例

      c = cast(ConsumerProtocol, kafkac)
      with c.watch() as g:
          for record in g:
              print(record.value)

      :生成器: *Iterable[ConsumerRecord]* -- 返回一个消息的可迭代对象



.. py:class:: ProducerProtocol

   Bases: :py:obj:`Protocol`

   同步生产者协议

   .. py:method:: publish(self, topic: str, value: Union[str, bytes]) -> None

      同步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值,
      :type value: Union[str, bytes, ]


   .. py:method:: mount(self) -> ContextManager[ProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(ProducerProtocol, kafkap)
      with p.mount() as cli:
          cli.publish("topic1", f"send {i}")
          print("send ok")

      :生成器: *ProducerProtocol* -- 返回一个同步发布协议对象



.. py:class:: AioConsumerProtocol

   Bases: :py:obj:`Protocol`

   异步消费者的协议.

   .. py:method:: watch(self) -> AsyncContextManager[AsyncIterable[redisproxy.models.ConsumerRecord]]

      异步监听接口.

      调用后获得一个管理启动关闭连接并且返回一个异步可迭代对象的上下文管理器.监听获取消息可以直接使用`async for`实现.

      .. rubric:: 示例

      c = cast(AioConsumerProtocol, kafkac)
      async with c.watch() as g:
          async for record in g:
              print(record.value)

      :生成器: *AsyncIterable[ConsumerRecord]* -- 返回一个消息的异步可迭代对象



.. py:class:: AioProducerProtocol

   Bases: :py:obj:`Protocol`

   异步生产者协议

   .. py:method:: publish(self, topic: str, value: Union[str, bytes]) -> None
      :async:

      异步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Union[str, bytes]


   .. py:method:: mount(self) -> AsyncContextManager[AioProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(AioProducerProtocol, kafkap)
      async with p.mount() as cli:
          await cli.publish("topic1", f"send {i}")
          print("send ok")

      :生成器: *AioProducerProtocol* -- 返回一个异步发布协议对象



.. py:class:: StreamProducerProtocol

   Bases: :py:obj:`Protocol`

   同步流对象的生产者协议

   .. py:method:: publish(self, topic: str, value: Dict[str, str]) -> None

      同步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Dict[str, str]


   .. py:method:: mount(self) -> ContextManager[StreamProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(ProducerProtocol, kafkap)
      with p.mount() as cli:
          cli.publish("topic1", {"key": "a key", "value": f"{i}y"})
          print("send ok")

      :生成器: *ProducerProtocol* -- 返回一个同步发布协议对象



.. py:class:: AioStreamProducerProtocol

   Bases: :py:obj:`Protocol`

   异步流对象的生产者协议

   .. py:method:: publish(self, topic: str, value: Dict[str, str]) -> None
      :async:

      异步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Dict[str, str]


   .. py:method:: mount(self) -> AsyncContextManager[AioStreamProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(AioProducerProtocol, kafkap)
      async with p.mount() as cli:
          await cli.publish("topic1", {"key": "a key", "value": f"{i}y"})
          print("send ok")

      :生成器: *AioProducerProtocol* -- 返回一个异步发布协议对象



