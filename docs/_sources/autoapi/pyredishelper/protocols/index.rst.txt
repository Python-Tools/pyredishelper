:py:mod:`pyredishelper.protocols`
=================================

.. py:module:: pyredishelper.protocols

.. autoapi-nested-parse::

   kafka代理的协议模块.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyredishelper.protocols.ProducerProtocol
   pyredishelper.protocols.AioProducerProtocol
   pyredishelper.protocols.StreamProducerProtocol
   pyredishelper.protocols.AioStreamProducerProtocol
   pyredishelper.protocols.ConsumerProtocol
   pyredishelper.protocols.AioConsumerProtocol




.. py:class:: ProducerProtocol

   Bases: :py:obj:`Protocol`

   同步生产者协议

   .. py:method:: publish(self, topic: str, value: Union[str, bytes]) -> None

      同步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值,
      :type value: Union[str, bytes, ]


   .. py:method:: mount(self) -> ContextManager[ProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(ProducerProtocol, kafkap)
      with p.mount() as cli:
          cli.publish("topic1", f"send {i}")
          print("send ok")

      :生成器: *ProducerProtocol* -- 返回一个同步发布协议对象



.. py:class:: AioProducerProtocol

   Bases: :py:obj:`Protocol`

   异步生产者协议

   .. py:method:: publish(self, topic: str, value: Union[str, bytes]) -> None
      :async:

      异步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Union[str, bytes]


   .. py:method:: mount(self) -> AsyncContextManager[AioProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(AioProducerProtocol, kafkap)
      async with p.mount() as cli:
          await cli.publish("topic1", f"send {i}")
          print("send ok")

      :生成器: *AioProducerProtocol* -- 返回一个异步发布协议对象



.. py:class:: StreamProducerProtocol

   Bases: :py:obj:`Protocol`

   同步流对象的生产者协议

   .. py:method:: publish(self, topic: str, value: Dict[str, str]) -> None

      同步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Dict[str, str]


   .. py:method:: mount(self) -> ContextManager[StreamProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(ProducerProtocol, kafkap)
      with p.mount() as cli:
          cli.publish("topic1", {"key": "a key", "value": f"{i}y"})
          print("send ok")

      :生成器: *ProducerProtocol* -- 返回一个同步发布协议对象



.. py:class:: AioStreamProducerProtocol

   Bases: :py:obj:`Protocol`

   异步流对象的生产者协议

   .. py:method:: publish(self, topic: str, value: Dict[str, str]) -> None
      :async:

      异步发布接口.

      :param topic: 发布去的主题
      :type topic: str
      :param value: 发布的值
      :type value: Dict[str, str]


   .. py:method:: mount(self) -> AsyncContextManager[AioStreamProducerProtocol]

      同步挂载接口.

      提供一个管理回收连接资源的上下文管理器.

      .. rubric:: 示例

      p = cast(AioProducerProtocol, kafkap)
      async with p.mount() as cli:
          await cli.publish("topic1", {"key": "a key", "value": f"{i}y"})
          print("send ok")

      :生成器: *AioProducerProtocol* -- 返回一个异步发布协议对象



.. py:class:: ConsumerProtocol

   Bases: :py:obj:`Protocol`

   同步消费者的协议.

   .. py:method:: watch(self) -> ContextManager[Iterable[pyredishelper.models.ConsumerRecord]]

      同步监听接口.

      调用后获得一个管理启动关闭连接并且返回一个可迭代对象的上下文管理器.监听获取消息可以直接使用`for`实现.

      .. rubric:: 示例

      c = cast(ConsumerProtocol, kafkac)
      with c.watch() as g:
          for record in g:
              print(record.value)

      :生成器: *Iterable[ConsumerRecord]* -- 返回一个消息的可迭代对象



.. py:class:: AioConsumerProtocol

   Bases: :py:obj:`Protocol`

   异步消费者的协议.

   .. py:method:: watch(self) -> AsyncContextManager[AsyncIterable[pyredishelper.models.ConsumerRecord]]

      异步监听接口.

      调用后获得一个管理启动关闭连接并且返回一个异步可迭代对象的上下文管理器.监听获取消息可以直接使用`async for`实现.

      .. rubric:: 示例

      c = cast(AioConsumerProtocol, kafkac)
      async with c.watch() as g:
          async for record in g:
              print(record.value)

      :生成器: *AsyncIterable[ConsumerRecord]* -- 返回一个消息的异步可迭代对象



